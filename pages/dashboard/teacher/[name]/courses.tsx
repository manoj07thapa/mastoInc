import SidebarLayout from "@/components/dashboard/SidebarLayout";
import { UserContext } from "@/contexts/UserContext";
import { listCourses } from "@/src/graphql/queries";
import { PageWithLayout, UserProp } from "@/types/types";
import { API, withSSRContext } from "aws-amplify";
import Head from "next/head";
import { ReactElement, useCallback, useContext, useEffect, useState } from "react";
import { ListCoursesQuery } from '../../../../types/amplifyCodegen/codegenTypes';
import CourseTable from "@/components/dashboard/tables/CourseTable";
import { GetServerSideProps } from "next";


const TeacherCourses: PageWithLayout = ({ }) => {
    const [courses, setCourses] = useState<ListCoursesQuery | undefined>(undefined);
    const userContext = useContext(UserContext);

    const userGroup = userContext?.user?.signInUserSession?.accessToken?.payload["cognito:groups"]

    const fetchCourses = useCallback(async () => {
        if (userContext?.user) {
            try {

                const res = (await API.graphql({
                    query: listCourses,
                    variables: {
                        filter: (userGroup?.includes('admin')) ? {} : (userGroup?.includes('teacher')) && { ownerEmail: { eq: userContext?.user?.attributes.email } }

                    },
                    authMode: "AMAZON_COGNITO_USER_POOLS",
                })) as { data: ListCoursesQuery };
                setCourses(res.data);
            } catch (error) {
                console.log('Error', error);


            }
        }
    }, [userContext?.user, userGroup]);

    useEffect(() => {
        fetchCourses();
    }, [fetchCourses]);



    return (
        <>
            <Head>
                <title>{`Dashboard | Courses`}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <h2>{userContext?.user?.attributes.name} Courses</h2>
            {courses && <CourseTable courses={courses} />}
        </>
    );
}

// binding the page to the sidebatlayout
TeacherCourses.getLayout = function (page: ReactElement) {
    return (
        <SidebarLayout >
            <main>{page}</main>
        </SidebarLayout>
    )
}

export default TeacherCourses;

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
    const SSR = withSSRContext({ req });
    // await pageNotFound(SSR)

    try {
        const user: UserProp = await SSR.Auth.currentAuthenticatedUser();
        const userGroup = user?.signInUserSession?.accessToken?.payload["cognito:groups"]

        if ((!userGroup?.includes("admin")) && (!userGroup?.includes("teacher"))) {
            return {
                notFound: true,
            };
        }
    } catch (error) {
        if (error) {
            return {
                notFound: true,
            };
        }
    }

    return {
        props: {},
    };
}