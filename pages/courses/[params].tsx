import Head from "next/head";
import { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/router";
import { Storage, withSSRContext } from "aws-amplify";
import CourseSidebar from "@/components/courses/CoursesSidebar";
import { listCourses } from "@/src/graphql/queries";
import CourseCard from "@/components/courses/CourseCard";
import { GetServerSideProps } from 'next';
import { CourseProps } from "@/types/types";
import CourseLoadingSkeleton from "@/components/utils/CourseLoadingSkeleton";
// import { Props } from "@headlessui/react/dist/types";

export const getServerSideProps: GetServerSideProps = async (ctx) => {
    const param = ctx.query.params;
    const req = ctx.req;
    const SSR = withSSRContext({ req });

    const filter = {
        category: { eq: param },
    };

    if (param === "all") {
        try {
            const response = await SSR.API.graphql({
                query: listCourses,
                // authMode: "AWS_IAM"
            });
            const data: CourseProps[] = response.data.listCourses.items
            return {
                props: {
                    ssrCourses: data,
                },
            };

        } catch (error) {
            return {
                props: {}
            }
        }

    } else {
        try {
            const response = await SSR.API.graphql({
                query: listCourses,
                variables: { filter },
                // authMode: "AWS_IAM"
            });

            const data: CourseProps[] = response.data.listCourses.items

            return {
                props: {
                    ssrCourses: data,
                },
            };

        } catch (error) {
            return {
                props: {}
            }
        }

    }
};

const Course = ({ ssrCourses }: { ssrCourses: CourseProps[] }) => {
    const router = useRouter();
    const [loading, setLoading] = useState(true);
    const [courses, setCourses] = useState<CourseProps[] | []>([]);
    console.log('courses', courses);

    const fetchCoursesWithImage = useCallback(async () => {
        try {
            const courses = await Promise.all(
                ssrCourses.map(async (course) => {
                    const images = await Promise.all(
                        course.images.map(async (image) => {
                            const img = await Storage.get(image);

                            return img;
                        })
                    );

                    course.s3ImageUrl = images;
                    return course;
                })
            );
            if (courses) {
                setCourses(courses);
                setLoading(false)
            }

        } catch (error) {
            console.log("error", error);
            setLoading(false)
        }
    }, [ssrCourses]);

    useEffect(() => {
        fetchCoursesWithImage();
    }, [fetchCoursesWithImage]);

    return (
        <>
            <Head>
                <title>{`Courses | ${router.query.params}`}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="px-4 mx-auto mt-9 max-w-7xl sm:px-6 lg:mt-16">
                <div className="divide-x divide-slate-800 divide-opacity-50 sm:grid sm:grid-cols-3 sm:gap-3 md:grid-cols-12">
                    <div className=" sm:col-span-1 md:col-span-2">
                        <CourseSidebar />
                    </div>
                    <main className="pl-16 sm:col-span-2 md:col-span-10">
                        {(loading && !courses.length) ? <CourseLoadingSkeleton /> : <CourseCard courses={courses} />}

                    </main>
                </div>

                {/* <div>rest of the content, like popular courses and all</div> */}
            </div>

        </>
    );
};

export default Course;
