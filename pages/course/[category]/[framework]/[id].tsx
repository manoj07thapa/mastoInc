import { GetStaticPaths, GetStaticProps, NextPage } from 'next';
import { useRouter } from "next/router";
import { getCourse, listCourses } from '@/src/graphql/queries';
import { CourseProps } from '../../../../types/types';
import { withSSRContext, Storage } from 'aws-amplify';
import Head from 'next/head';
import { useCallback, useEffect, useState } from 'react';
import CourseContainer from '@/components/course/CourseContainer';

export const getStaticPaths: GetStaticPaths = async () => {
    const SSR = withSSRContext();
    const { data } = await SSR.API.graphql({
        query: listCourses,
        authMode: "AWS_IAM",
    });
    console.log('gspdata', data);
    const items: CourseProps[] = data.listCourses.items
    const paths = items.map((course: any) => ({
        params: {
            category: course.category,
            framework: course.framework,
            id: course.id,
            title: course.title
        },
    }));
    return {
        fallback: true,
        paths,
    };
}

export const getStaticProps: GetStaticProps = async ({ params }) => {
    console.log('SSGPARAMS', params);
    const SSR = withSSRContext();
    const { data } = await SSR.API.graphql({
        query: getCourse,
        variables: {
            id: params?.id
        },
        authMode: "AWS_IAM",
    });
    if (!data) {
        return {
            notFound: true,
        }
    }
    const ssgCourse: CourseProps = data.getCourse
    return {
        props: {
            ssgCourse
        },
        revalidate: 100,
    };
}


const Course = ({ ssgCourse }: { ssgCourse: CourseProps }) => {
    console.log('sSGCOURSE', ssgCourse);
    const [courseImageUrl, setCourseImageUrl] = useState<string[] | []>([]);
    console.log('Image', courseImageUrl);

    const fetchCourseImageUrl = useCallback(async () => {
        if (ssgCourse.images) {
            try {
                const imageUrls = await Promise.all(
                    ssgCourse.images.map(async (image) => {
                        const img = await Storage.get(image)
                        return img
                    })
                )
                setCourseImageUrl(imageUrls)
            } catch (error) {
                console.log('CourseImageurlError', error);

            }
        }
    }, [ssgCourse]);

    useEffect(() => {
        fetchCourseImageUrl();
    }, [fetchCourseImageUrl]);

    const router = useRouter()
    if (router.isFallback) {
        return (
            <div >
                Loading
            </div>
        );
    }
    return (
        <>
            <Head>
                <title>{`${ssgCourse.title} `}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <CourseContainer ssgCourse={ssgCourse} courseImages={courseImageUrl} />
        </>
    );
}
export default Course;